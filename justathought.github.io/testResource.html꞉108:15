











































































































         window.onload = function()
         {      
      resourceOnload();
      var content = document.querySelectorAll("div.cardResources");
      var titleContent = document.querySelectorAll("div.cardResources h4");
      var descriptions = document.querySelectorAll("div.cardResources p");
      var JSONArray;
      function manufactureArray(props, content, titleContent, description) {
          var arr = [];
          var obj;
          // Loop for the number of objects you want to push to the array
          for (var i = 0; i < content.length; i++) {
              obj = {};
              // Create the properties within a new object, and push it into the array
              for (var j = 0; j < props.length; j++) {
                  //1st entry here is the titles of the text
                  if (j == 0) {
                      obj[props[j]] = titleContent[i].textContent;
                  }
                  //2nd entry is the data tags
                  if(j == 1) {
                      obj[props[j]] = content[i].getAttribute('data-tag');
                  }
                  if(j==2)
                  {
                     obj[props[j]] = description[i].textContent;
                  }
              }
      
              arr.push(obj);
          }
            JSONarray = JSON.stringify(arr);
            return JSON.parse(JSONarray);
      }
      
   const resourceArray = manufactureArray(['Title', 'DataTag', 'Description'], content, titleContent, descriptions);
   const autoCompleteJS = new autoComplete({
          selector: "#autoComplete",
          placeHolder: "Search...",
          data: {
            src: resourceArray,
              keys: ["Title", "Description", "DataTag"],
              cache: true,
              filter: (list) => {
                  // Filter duplicates
                  // incase of multiple data keys usage
                  const filteredResults = Array.from(
                      new Set(list.map((value) => value.match))
                  ).map((tag) => {
                      return list.find((value) => value.match === tag);
                  });
                  return filteredResults;
              }
          },
          resultsList: {
              element: (list, data) => {
               const message = document.createElement("div");
               // Append message element to the results list
            //    buttonContent = document.querySelector("div#buttonWrapper button");
            //       $('.cardResources').css('visibility','hidden');
            //       $('.cardResources').css('display', 'none');
               var rex = /\S/;
               for(matchesIndex = 0; matchesIndex<data.matches.length; matchesIndex++)
               {
                   if(matchesIndex!=0 && data.matches[matchesIndex].key=="Description")
                   {                         
                        if(data.matches[matchesIndex].value.Title == data.matches[matchesIndex-1].value.Title)
                        {
                            //data.results.splice(data.matches[a],1);
                            delete data.matches[matchesIndex];
                            delete data.results[matchesIndex];
                            //delete data.results[a];
                            //data.results.splice(data.matches[a],1);
                            data.results = data.results.filter(rex.test.bind(rex));
                            //data.results = data.results.filter(rex.test.bind(rex));
                            data.matches = data.matches.filter(rex.test.bind(rex));
                            //console.log(data.results);
                            if(data.results.length <= 5)
                            {
                                //data.results[a].match = data.results[a].value.Title;
                                data.results.push(data.matches[matchesIndex]);
                                
                            }
                            else 
                            {
                                data.results.pop();
                            }
                            matchesIndex--;
                        }
                   }
               }
               
               var uniq = data.results.reduce(function(a,b){
                    if (a.indexOf(b) < 0 ) a.push(b);
                    return a;
                },[]);
                data.results = uniq;
                var filtered = data.results.filter(function(x)
                {
                    return x!== undefined;
                })
                data.results = filtered;
                for(resultsIndex = 0; resultsIndex < data.results.length; resultsIndex++)
                {
                    if(data.results[resultsIndex].key=="Description")
                    {
                        data.results[resultsIndex].match = data.results[resultsIndex].value.Title;
                    }
                }
                $('#autoComplete_list_1').css("visibility", "visible");
                $('#autoComplete_list_1 li').off("click");
                $('#autoComplete_list_1').empty();
                for(i = 0; i < data.results.length; i++)
                {
                    var x = document.createElement("li");
                    x.innerHTML=data.results[i].match;
                    x.onclick=function(){
                        $('#autoComplete').value = this.textContent;
                    };
                    x.setAttribute('onclick','listClicky(this);');
                    $('#autoComplete_list_1').append(x);
                    
                }
                $('.cardResources').css("display","none");
                $('.cardResources').css("visibility","hidden");
                var resultIndex = 0;
                try
                {
                for(contentIndex = 0; contentIndex<content.length;)
                {
                    if(titleContent[contentIndex].textContent == data.results[resultIndex].value.Title)
                    {
                        content[contentIndex].style.display="block";
                        content[contentIndex].style.visibility="visible";
                        resultIndex++;
                    }
                    contentIndex++;
                }
                }
                catch
                {

                }
                message.innerHTML = `Displaying <strong>${data.results.length}</strong> out of <strong>${data.matches.length}</strong> results`;
                list.prepend(message); 
                  if (!data.results.length) {
                      // Create "No Results" message element
                      // Add class to the created element
                      message.setAttribute("class", "no_result");
                      // Add message text content
                      message.innerHTML = `<span>Found No Results for "${data.query}"</span>`;
                      // Append message element to the results list
                      list.prepend(message);
                      for (i = 0; i < content.length; i++) {
                          content[i].style.visibility = "hidden";
                      }
                  }
              },
              noResults: true,
          },
          resultItem: {
              highlight: {
                  render: true
              }
          },
          events: {
              input: {
                  selection: (event) => {
                      var auto = document.getElementById("autoComplete");
                      const feedback = event.detail;
                      //alert(feedback.selection.value[feedback.selection.key]);
                      autoCompleteJS.input.blur();
                      // Prepare User's Selected Value
                      const selection = feedback.selection.value;
                      // Render selected choice to selection div
                      auto.innerHTML = selection[feedback.selection.key];
                      // Replace Input value with the selected value
                      autoCompleteJS.input.value = selection[feedback.selection.key];
                      // Console log autoComplete data feedback
                      for (i = 0; i < content.length; i++) {
                          if ((titleContent[i].textContent == selection[feedback.selection.key])||content[i].getAttribute("data-tag")==selection[feedback.selection.key]) {
                              content[i].style.visibility = "visible";
                              content[i].style.display = "block";
                          }
                          else {
                              content[i].style.visibility = "hidden";
                              content[i].style.display = "none";
                          }
                      }
                  }
              }
          },
          searchEngine: "strict",
          maxResults: 15,
          trigger: (query) => {
             if(query.length == 0)
             {
                //$('#autoComplete').keyup();
                $('.cardResources').css('visibility', 'visible');
                $('.cardResources').css('display', 'block');
             }
              return query.replace(/ /g, "").length; // Returns "Boolean"
          },
      });
         }

      